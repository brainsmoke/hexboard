/*
 * Drive 16 UART LED strip drivers chips at once
 *
 * Protocol:
 *   Frame:         [00-FD]*16384 [FE]
 *   Discard frame: [FF]
 *
 */

#include <HexSerialz.h>
#include <usb_dev.h>

#define N_DATA_BYTES_PER_STRIP 1024
#define N_BYTES_PER_STRIP (N_DATA_BYTES_PER_STRIP + 1)
#define N_DATA_BAUDS_PER_STRIP (10 * N_DATA_BYTES_PER_STRIP)
#define N_BAUDS_PER_STRIP (10 * N_BYTES_PER_STRIP)
#define N_STRIPS 16

#define END_OF_FRAME 0xfe
#define DISCARD_FRAME 0xff

uint16_t buf_a[N_BAUDS_PER_STRIP];
uint16_t buf_b[N_BAUDS_PER_STRIP];
uint16_t *cur, *next;
HexSerialz *hex;

const uint16_t precomp_order[]= /* buffer index & serial line for every 32'th byte */
{
/*
 * buf = []
 * 
 * unused = (0,)
 * top_bar_lines = (8,)
 * 
 * for i in top_bar_lines:
 *     for d in (0, 32):
 *         for j in range(0,32,2):
 *             buf += [ '{:5d}'.format( (j+d)*16*10), '1<<{:2d}'.format(i)]
 * 
 * vertical_lines = ( 12, 14, 15, 13, 11, 9, 6, 4, 2, 0, 1, 3, 5, 7 )
 * 
 * 
 * for i in range(0,32,2):
 *     for j in vertical_lines:
 *         for d in (0, 32):
 *             buf += [ '{:5d}'.format((i+d)*16*10), '1<<{:2d}'.format(j) ]
 * 
 * perline=16
 * 
 * for i in range(len(buf)//perline):
 *     print ( ','.join(buf[i*perline+n] for n in range(perline) )+',' )
 * 
 */

    0,1<< 8,  320,1<< 8,  640,1<< 8,  960,1<< 8, 1280,1<< 8, 1600,1<< 8, 1920,1<< 8, 2240,1<< 8,
 2560,1<< 8, 2880,1<< 8, 3200,1<< 8, 3520,1<< 8, 3840,1<< 8, 4160,1<< 8, 4480,1<< 8, 4800,1<< 8,
 5120,1<< 8, 5440,1<< 8, 5760,1<< 8, 6080,1<< 8, 6400,1<< 8, 6720,1<< 8, 7040,1<< 8, 7360,1<< 8,
 7680,1<< 8, 8000,1<< 8, 8320,1<< 8, 8640,1<< 8, 8960,1<< 8, 9280,1<< 8, 9600,1<< 8, 9920,1<< 8,
    0,1<<12, 5120,1<<12,    0,1<<14, 5120,1<<14,    0,1<<15, 5120,1<<15,    0,1<<13, 5120,1<<13,
    0,1<<11, 5120,1<<11,    0,1<< 9, 5120,1<< 9,    0,1<< 6, 5120,1<< 6,    0,1<< 4, 5120,1<< 4,
    0,1<< 2, 5120,1<< 2,    0,1<< 0, 5120,1<< 0,    0,1<< 1, 5120,1<< 1,    0,1<< 3, 5120,1<< 3,
    0,1<< 5, 5120,1<< 5,    0,1<< 7, 5120,1<< 7,  320,1<<12, 5440,1<<12,  320,1<<14, 5440,1<<14,
  320,1<<15, 5440,1<<15,  320,1<<13, 5440,1<<13,  320,1<<11, 5440,1<<11,  320,1<< 9, 5440,1<< 9,
  320,1<< 6, 5440,1<< 6,  320,1<< 4, 5440,1<< 4,  320,1<< 2, 5440,1<< 2,  320,1<< 0, 5440,1<< 0,
  320,1<< 1, 5440,1<< 1,  320,1<< 3, 5440,1<< 3,  320,1<< 5, 5440,1<< 5,  320,1<< 7, 5440,1<< 7,
  640,1<<12, 5760,1<<12,  640,1<<14, 5760,1<<14,  640,1<<15, 5760,1<<15,  640,1<<13, 5760,1<<13,
  640,1<<11, 5760,1<<11,  640,1<< 9, 5760,1<< 9,  640,1<< 6, 5760,1<< 6,  640,1<< 4, 5760,1<< 4,
  640,1<< 2, 5760,1<< 2,  640,1<< 0, 5760,1<< 0,  640,1<< 1, 5760,1<< 1,  640,1<< 3, 5760,1<< 3,
  640,1<< 5, 5760,1<< 5,  640,1<< 7, 5760,1<< 7,  960,1<<12, 6080,1<<12,  960,1<<14, 6080,1<<14,
  960,1<<15, 6080,1<<15,  960,1<<13, 6080,1<<13,  960,1<<11, 6080,1<<11,  960,1<< 9, 6080,1<< 9,
  960,1<< 6, 6080,1<< 6,  960,1<< 4, 6080,1<< 4,  960,1<< 2, 6080,1<< 2,  960,1<< 0, 6080,1<< 0,
  960,1<< 1, 6080,1<< 1,  960,1<< 3, 6080,1<< 3,  960,1<< 5, 6080,1<< 5,  960,1<< 7, 6080,1<< 7,
 1280,1<<12, 6400,1<<12, 1280,1<<14, 6400,1<<14, 1280,1<<15, 6400,1<<15, 1280,1<<13, 6400,1<<13,
 1280,1<<11, 6400,1<<11, 1280,1<< 9, 6400,1<< 9, 1280,1<< 6, 6400,1<< 6, 1280,1<< 4, 6400,1<< 4,
 1280,1<< 2, 6400,1<< 2, 1280,1<< 0, 6400,1<< 0, 1280,1<< 1, 6400,1<< 1, 1280,1<< 3, 6400,1<< 3,
 1280,1<< 5, 6400,1<< 5, 1280,1<< 7, 6400,1<< 7, 1600,1<<12, 6720,1<<12, 1600,1<<14, 6720,1<<14,
 1600,1<<15, 6720,1<<15, 1600,1<<13, 6720,1<<13, 1600,1<<11, 6720,1<<11, 1600,1<< 9, 6720,1<< 9,
 1600,1<< 6, 6720,1<< 6, 1600,1<< 4, 6720,1<< 4, 1600,1<< 2, 6720,1<< 2, 1600,1<< 0, 6720,1<< 0,
 1600,1<< 1, 6720,1<< 1, 1600,1<< 3, 6720,1<< 3, 1600,1<< 5, 6720,1<< 5, 1600,1<< 7, 6720,1<< 7,
 1920,1<<12, 7040,1<<12, 1920,1<<14, 7040,1<<14, 1920,1<<15, 7040,1<<15, 1920,1<<13, 7040,1<<13,
 1920,1<<11, 7040,1<<11, 1920,1<< 9, 7040,1<< 9, 1920,1<< 6, 7040,1<< 6, 1920,1<< 4, 7040,1<< 4,
 1920,1<< 2, 7040,1<< 2, 1920,1<< 0, 7040,1<< 0, 1920,1<< 1, 7040,1<< 1, 1920,1<< 3, 7040,1<< 3,
 1920,1<< 5, 7040,1<< 5, 1920,1<< 7, 7040,1<< 7, 2240,1<<12, 7360,1<<12, 2240,1<<14, 7360,1<<14,
 2240,1<<15, 7360,1<<15, 2240,1<<13, 7360,1<<13, 2240,1<<11, 7360,1<<11, 2240,1<< 9, 7360,1<< 9,
 2240,1<< 6, 7360,1<< 6, 2240,1<< 4, 7360,1<< 4, 2240,1<< 2, 7360,1<< 2, 2240,1<< 0, 7360,1<< 0,
 2240,1<< 1, 7360,1<< 1, 2240,1<< 3, 7360,1<< 3, 2240,1<< 5, 7360,1<< 5, 2240,1<< 7, 7360,1<< 7,
 2560,1<<12, 7680,1<<12, 2560,1<<14, 7680,1<<14, 2560,1<<15, 7680,1<<15, 2560,1<<13, 7680,1<<13,
 2560,1<<11, 7680,1<<11, 2560,1<< 9, 7680,1<< 9, 2560,1<< 6, 7680,1<< 6, 2560,1<< 4, 7680,1<< 4,
 2560,1<< 2, 7680,1<< 2, 2560,1<< 0, 7680,1<< 0, 2560,1<< 1, 7680,1<< 1, 2560,1<< 3, 7680,1<< 3,
 2560,1<< 5, 7680,1<< 5, 2560,1<< 7, 7680,1<< 7, 2880,1<<12, 8000,1<<12, 2880,1<<14, 8000,1<<14,
 2880,1<<15, 8000,1<<15, 2880,1<<13, 8000,1<<13, 2880,1<<11, 8000,1<<11, 2880,1<< 9, 8000,1<< 9,
 2880,1<< 6, 8000,1<< 6, 2880,1<< 4, 8000,1<< 4, 2880,1<< 2, 8000,1<< 2, 2880,1<< 0, 8000,1<< 0,
 2880,1<< 1, 8000,1<< 1, 2880,1<< 3, 8000,1<< 3, 2880,1<< 5, 8000,1<< 5, 2880,1<< 7, 8000,1<< 7,
 3200,1<<12, 8320,1<<12, 3200,1<<14, 8320,1<<14, 3200,1<<15, 8320,1<<15, 3200,1<<13, 8320,1<<13,
 3200,1<<11, 8320,1<<11, 3200,1<< 9, 8320,1<< 9, 3200,1<< 6, 8320,1<< 6, 3200,1<< 4, 8320,1<< 4,
 3200,1<< 2, 8320,1<< 2, 3200,1<< 0, 8320,1<< 0, 3200,1<< 1, 8320,1<< 1, 3200,1<< 3, 8320,1<< 3,
 3200,1<< 5, 8320,1<< 5, 3200,1<< 7, 8320,1<< 7, 3520,1<<12, 8640,1<<12, 3520,1<<14, 8640,1<<14,
 3520,1<<15, 8640,1<<15, 3520,1<<13, 8640,1<<13, 3520,1<<11, 8640,1<<11, 3520,1<< 9, 8640,1<< 9,
 3520,1<< 6, 8640,1<< 6, 3520,1<< 4, 8640,1<< 4, 3520,1<< 2, 8640,1<< 2, 3520,1<< 0, 8640,1<< 0,
 3520,1<< 1, 8640,1<< 1, 3520,1<< 3, 8640,1<< 3, 3520,1<< 5, 8640,1<< 5, 3520,1<< 7, 8640,1<< 7,
 3840,1<<12, 8960,1<<12, 3840,1<<14, 8960,1<<14, 3840,1<<15, 8960,1<<15, 3840,1<<13, 8960,1<<13,
 3840,1<<11, 8960,1<<11, 3840,1<< 9, 8960,1<< 9, 3840,1<< 6, 8960,1<< 6, 3840,1<< 4, 8960,1<< 4,
 3840,1<< 2, 8960,1<< 2, 3840,1<< 0, 8960,1<< 0, 3840,1<< 1, 8960,1<< 1, 3840,1<< 3, 8960,1<< 3,
 3840,1<< 5, 8960,1<< 5, 3840,1<< 7, 8960,1<< 7, 4160,1<<12, 9280,1<<12, 4160,1<<14, 9280,1<<14,
 4160,1<<15, 9280,1<<15, 4160,1<<13, 9280,1<<13, 4160,1<<11, 9280,1<<11, 4160,1<< 9, 9280,1<< 9,
 4160,1<< 6, 9280,1<< 6, 4160,1<< 4, 9280,1<< 4, 4160,1<< 2, 9280,1<< 2, 4160,1<< 0, 9280,1<< 0,
 4160,1<< 1, 9280,1<< 1, 4160,1<< 3, 9280,1<< 3, 4160,1<< 5, 9280,1<< 5, 4160,1<< 7, 9280,1<< 7,
 4480,1<<12, 9600,1<<12, 4480,1<<14, 9600,1<<14, 4480,1<<15, 9600,1<<15, 4480,1<<13, 9600,1<<13,
 4480,1<<11, 9600,1<<11, 4480,1<< 9, 9600,1<< 9, 4480,1<< 6, 9600,1<< 6, 4480,1<< 4, 9600,1<< 4,
 4480,1<< 2, 9600,1<< 2, 4480,1<< 0, 9600,1<< 0, 4480,1<< 1, 9600,1<< 1, 4480,1<< 3, 9600,1<< 3,
 4480,1<< 5, 9600,1<< 5, 4480,1<< 7, 9600,1<< 7, 4800,1<<12, 9920,1<<12, 4800,1<<14, 9920,1<<14,
 4800,1<<15, 9920,1<<15, 4800,1<<13, 9920,1<<13, 4800,1<<11, 9920,1<<11, 4800,1<< 9, 9920,1<< 9,
 4800,1<< 6, 9920,1<< 6, 4800,1<< 4, 9920,1<< 4, 4800,1<< 2, 9920,1<< 2, 4800,1<< 0, 9920,1<< 0,
 4800,1<< 1, 9920,1<< 1, 4800,1<< 3, 9920,1<< 3, 4800,1<< 5, 9920,1<< 5, 4800,1<< 7, 9920,1<< 7,
};

void init_buf(uint16_t *buf)
{
	uint32_t i;

	for (i=0; i<8; i++)
		if ( END_OF_FRAME & (1<<i) )
			buf[N_DATA_BAUDS_PER_STRIP+1+i] = 0xffff;
		else
			buf[N_DATA_BAUDS_PER_STRIP+1+i] = 0x0000;

	for (i=0; i<N_BAUDS_PER_STRIP; i+=10)
	{
		buf[i] = 0x0000;
		buf[i+9] = 0xffff;
	}
}

static usb_packet_t *rx_packet=NULL;
static int rx_i=0, rx_len=0;

static int usb_getchar(void)
{
	if (rx_len <= rx_i)
	{
		if (rx_packet)
			usb_free(rx_packet);

		while ( !(rx_packet = usb_rx(CDC_RX_ENDPOINT)) || \
		         (rx_packet->index >= rx_packet->len)  );

		rx_i   = rx_packet->index;
		rx_len = rx_packet->len;
	}
	return (uint8_t)rx_packet->buf[rx_i++];
}

static int read_next_frame(void)
{
	int baud_ix=0, c, i, j;
	uint16_t strip_bit;

	for(i=0; i<960; i+=2)
	{
		baud_ix = precomp_order[i];
		strip_bit = precomp_order[i+1];

		for (j=0; j<32; j++)
		{
			c = usb_getchar();
			if (c >= END_OF_FRAME)
				return c == END_OF_FRAME;

			uint16_t *p = &next[baud_ix];

			if (c&0x01) p[1] |=  strip_bit;
			else        p[1] &=~ strip_bit;

			if (c&0x02) p[2] |=  strip_bit;
			else        p[2] &=~ strip_bit;

			if (c&0x04) p[3] |=  strip_bit;
			else        p[3] &=~ strip_bit;

			if (c&0x08) p[4] |=  strip_bit;
			else        p[4] &=~ strip_bit;

			if (c&0x10) p[5] |=  strip_bit;
			else        p[5] &=~ strip_bit;

			if (c&0x20) p[6] |=  strip_bit;
			else        p[6] &=~ strip_bit;

			if (c&0x40) p[7] |=  strip_bit;
			else        p[7] &=~ strip_bit;

			if (c&0x80) p[8] |=  strip_bit;
			else        p[8] &=~ strip_bit;

			baud_ix += 10;
		}
	}

	for (;;)
	{
		c = usb_getchar();
		if (c >= END_OF_FRAME)
			return c == END_OF_FRAME;
	}
}

void setup(void)
{
	usb_init();
}

void loop(void)
{
	memset(buf_a, 0, sizeof(buf_a));
	memset(buf_b, 0, sizeof(buf_b));
	init_buf(buf_a);
	init_buf(buf_b);
	cur = buf_a;
	next = buf_b;
	uint16_t *tmp;

    hex = new HexSerialz(N_BAUDS_PER_STRIP*2, 1000000);
    hex->begin();

    for (;;)
    {
		while(!read_next_frame());
        tmp=cur;
		cur=next;
		next=tmp;
        hex->show(cur);
		memcpy(next, cur, sizeof(buf_a));
    }
}
